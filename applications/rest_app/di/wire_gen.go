// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"rest_app/app"
	"rest_app/app/config"
	"rest_app/database"
	app2 "rest_app/di/app"
	"rest_app/di/databaseservice"
	"rest_app/di/repositories"
	server2 "rest_app/di/server"
	"rest_app/di/usecases"
	enerbit3 "rest_app/domain/usecase/enerbit"
	"rest_app/infrastructure/drivenadapters/databaseservice/enerbit"
	enerbit2 "rest_app/infrastructure/drivenadapters/repositories/enerbit"
	"rest_app/infrastructure/entrypoints/rest/handlers"
	"rest_app/infrastructure/entrypoints/rest/routers"
	"rest_app/server"
)

// Injectors from wire.go:

// NewApplication wire's injector to create a new `app.Application`
func NewApplication(conf config.AppConfiguration) (*app.Application, error) {
	engine := server.NewServer()
	db, err := database.NewPostgresStoreConnection()
	if err != nil {
		return nil, err
	}
	databaseServiceImpl := enerbit.NewDatabaseServiceImpl(db)
	client := database.NewConnectionRedis()
	redisServiceImpl := enerbit.NewRedisServiceImpl(client)
	repository := enerbit2.NewRepository(databaseServiceImpl, redisServiceImpl)
	useCase := enerbit3.NewUseCase(repository, repository)
	handler := handlers.NewHandler(useCase)
	enerBitRouter := routers.NewEnerBitRouter(handler)
	router := routers.NewRouter(engine, enerBitRouter)
	application := &app.Application{
		Router: router,
		Config: conf,
	}
	return application, nil
}

// NewAppConfiguration wire's injector to create a new `config.AppConfiguration`
func NewAppConfiguration() config.AppConfiguration {
	appConfiguration := config.InitAppConfiguration()
	return appConfiguration
}

// wire.go:

var providerSet = wire.NewSet(app2.ProviderSet, server2.GinProviderSet, usecases.ProviderSet, repositories.ProviderSet, databaseservice.ProviderSet)
